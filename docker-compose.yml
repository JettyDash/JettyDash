version: '3.9'

services:
  
  backend:
    build: ./BackendApplication/Api
    container_name: backend
    ports:
      - "5000:5000"
    volumes:
      - ./BackendApplication:/app
    depends_on:
      - postgres
    networks:
      - backend-network
    environment:
      ASPNETCORE_ENVIRONMENT:
        ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS:
        ${ASPNETCORE_URLS}
      CONNECTIONSTRINGS__DEFAULTCONNECTION:
        ${CONNECTIONSTRINGS__DEFAULTCONNECTION}
      JWTCONFIG__SECRET:
        ${JWTCONFIG__SECRET}
      JWTCONFIG__ISSUER:
        ${JWTCONFIG__ISSUER}
      JWTCONFIG__AUDIENCE:
        ${JWTCONFIG__AUDIENCE}
      JWTCONFIG__ACCESSTOKENEXPIRATION:
        ${JWTCONFIG__ACCESSTOKENEXPIRATION}
      JWTCONFIG__REFRESHTOKENEXPIRATION:
        ${JWTCONFIG__REFRESHTOKENEXPIRATION}
  
  nextjs:
    build: ./WebsiteApplication/
    container_name: nextjs
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
    restart: always
  
  
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    ports:
      - ${DATABASE_PORT}:${DATABASE_PORT}
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    networks:
      - backend-network
    environment:
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_DB: ${DATABASE_DB}
      POSTGRES_PORT: ${DATABASE_PORT}

networks:
  backend-network:
    driver: bridge
volumes:
  postgres-data:
